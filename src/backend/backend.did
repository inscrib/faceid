type BoundingBox = record {
  left: float32;
  top: float32;
  right: float32;
  bottom: float32;
};

type Embedding = record {
  v0: vec float32;
};

type Person = record {
  label: text;
  score: float32;
};

type Detection = variant {
  Ok: BoundingBox;
  Err: Error;
};

type Addition = variant {
  Ok: Embedding;
  Err: Error;
};

type Recognition = variant {
  Ok: Person;
  Err: Error;
};

type RecognitionResult = record {
    label: text;
    score: float32;
};

type Principal = principal;

type Error = record {
  message: text;
};



service : {
    "detect": (image: blob) -> (Detection) query;
    "recognize": (image: blob) -> (Recognition);
    "add": (label: text, image: blob,code: text) -> (Addition);
    "get_recognition_result": (principal) -> (opt RecognitionResult) query;

    "clear_face_detection_model_bytes": () -> (variant { Ok; Err : text });
    "clear_face_recognition_model_bytes": () -> (variant { Ok; Err : text });
    "append_face_detection_model_bytes": (bytes: blob) -> (variant { Ok; Err : text });
    "append_face_recognition_model_bytes": (bytes: blob) -> (variant { Ok; Err : text });
    "setup_models": () -> (variant { Ok; Err : text });
    "toggle_add_function": (bool) -> (variant { Ok; Err : text });
    "get_add_callers": () -> (nat64, vec principal) query;
    "get_all_recognition_results": () -> (vec text) query;
    "get_cycles": () -> (nat64) query;

     "add_cycles": () -> ();   

}
